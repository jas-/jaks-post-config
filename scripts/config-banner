#!/bin/bash

# Associative array of files with which to setup a banner
declare -A files
files[issue]=/etc/issue
files[motd]=/etc/motd

# Variable to handle the banner content
read -d '' banner <<"EOF"
|-----------------------------------------------------------------|
| This system is for the use of authorized users only.            |
| Individuals using this computer system without authority, or in |
| excess of their authority, are subject to having all of their   |
| activities on this system monitored and recorded by system      |
| personnel.                                                      |
|                                                                 |
| In the course of monitoring individuals improperly using this   |
| system, or in the course of system maintenance, the activities  |
| of authorized users may also be monitored.                      |
|                                                                 |
| Anyone using this system expressly consents to such monitoring  |
| and is advised that if such monitoring reveals possible         |
| evidence of criminal activity, system personnel may provide the |
| evidence of such monitoring to law enforcement officials.       |
|-----------------------------------------------------------------|
EOF

# Get our current working directory
cwd=$(dirname ${BASH_SOURCE[0]})

# Setup a path for binary tools (just in case)
PATH=$PATH:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin

# Make sure our common libraries are available
if [ ! -f "${cwd}/libs/common" ] ; then
  echo "${prog}: Could not load libraries"
  exit 1
fi

# Load our libs
source ${cwd}/libs/common

# Displays available arg list
usage()
{
  cat <<EOF
Usage $0 [options]

Configure core dump management

  Help:
    -h  Show this message
    -v  Enable verbosity mode

  Required:
    -a  Author name (required)

  Options:
    -b  File for banner
    -m  File motd

  Validation:
    -c  Perform validation of change

  Restoration options:
    -r  Perform rollback of changes
    -i  Interactive mode, to be used with -r

  Development mode:
    -t  Run in test mode (assumes test env)

EOF
}

config_audit_core()
{
  # Error array
  errors=()

  # Global info array
  info=()

  # Iterate our array of files
  for file in ${!files[@]}; do

    # Start counting so we have an index
    i=$((i+1))

    # Use test suite if enabled
    if [ "${test}" == 1 ] ; then
      files[${file}]=$(create_test "${cwd}/test/originals/$(basename ${files[${file}]})")
      if [ $? != 0 ] ; then
        errors+=("ERROR: Error working with test env for ${file} (${files[${file}]}")
        echo "${errors[@]}" && return 1
      fi
    fi

    # Ensure the file/path is a valid file
    if [ ! -f ${files[${file}]} ]; then
      errors+=("ERROR: File ${file} not found (${files[${file}]}),")
      echo "${errors[@]}" && return 1
    fi

    # Perform restoration if specified
    if [ "${restore}" == 1 ] ; then

      info+=("$(restore "${files[${file}]}")")

      # Check results & return if an error occured
      if [ $? != 0 ]; then
        echo "${info[@]}" && return 1
      fi

      # If its the last file in the ${files[@]} array exit success
      if [ ${i} -eq ${#files[@]} ]; then
        echo "${info[@]}" && return 0
      fi
    fi

    # Backup file if we are making changes
    if [[ "${check}" == 0 ]] && [[ "${restore}" == 0 ]] ; then

      info+=("$(backup "${files[${file}]}" "${author}")")

      # Check results & return if an error occured
      if [ $? != 0 ]; then
        echo "${info[@]}" && return 1
      fi
    fi

    # Do work
    if [ "${check}" == 0 ]; then
      info+=("INFO: Adding banner to ${files[${file}]},")

      # We aren't going to replace, only overwrite
      echo "${banner}" > ${files[${file}]}
    fi

    # Validate ${banner} exists in ${files[${file}]}
    info+=("INFO: Validating banner in ${files[${file}]},")

    # Create ${needle} from ${banner}
    needle=$(echo "${banner}"|tr '\n' ':')

    # Re-create ${haystack} from ${files[${file}]}
    haystack=$(cat ${files[${file}]}|tr '\n' ':')

    # Find ${needle} in ${haystack}
    val=$(echo "${haystack}"|grep "^${needle}")
    if [ "${val}" == "" ]; then
      errors+=("ERROR: Configured banner does not exist in ${files[${file}]},")
    fi
  done

  # Return errors
  if [ "${#errors[@]}" != 0 ] ; then
    errors+=("${info[@]}")
    echo "${errors[@]}" && return 1
  fi

  # Expose information array
  echo "${info[@]}"

  # Return code
  return 0
}

# Global options
verbose=0
check=0
restore=0
test=0
interactive=0
prog=$(basename $0)

# Ensure we have permissions
if [ $UID != 0 ] ; then
  echo "${prog}: Requires root privileges"
  exit 1
fi

while getopts "ha:vcrtib:m:" OPTION ; do
  case $OPTION in
    h) usage && exit 1 ;;
    a) author=$OPTARG ;;
    b) files[issue]=$OPTARG ;;
    m) files[motd]=$OPTARG ;;
    v) verbose=1 ;;
    c) check=1 ;;
    r) restore=1 ;;
    t) test=1 ;;
    i) interactive=1 ;;
    ?) usage && exit 1 ;;
  esac
done

# Make sure we have an author if we are not restoring or validating
if [[ "${author}" == "" ]] && [[ "${restore}" == 0 ]] && [[ "${check}" == 0 ]]; then
  echo "${prog}: Must specify an author name (use -a <initials>)"
  usage
  exit 1
fi

# Robot, do work
main "config_audit_core"
