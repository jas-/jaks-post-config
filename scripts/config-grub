#!/bin/bash

# File to use
file=/boot/grub/grub.conf

# An associative array of options for grub
# Ref: https://www.kernel.org/doc/Documentation/kernel-parameters.txt
declare -A opts
opts[audit]=1
opts[crashkernel]='512M'

# Get our current working directory
cwd=$(dirname ${BASH_SOURCE[0]})

# Setup a path for binary tools (just in case)
PATH=$PATH:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin

# Make sure our common libraries are available
if [ ! -f "${cwd}/libs/common" ] ; then
  echo "${prog}: Could not load libraries"
  exit 1
fi

# Load our libs
source ${cwd}/libs/common

# Displays available arg list
usage()
{
  cat <<EOF
Usage $0 [options]

Configure grub

  Help:
    -h  Show this message
    -v  Enable verbosity mode

  Required:
    -a  Author name (required)

  Options:
    -F  File to use

  Validation:
    -c  Perform validation of change

  Restoration options:
    -r  Perform rollback of changes
    -i  Interactive mode, to be used with -r

  Development mode:
    -t  Run in test mode (assumes test env)

EOF
}

config_grub_audit()
{
  # Error array
  errors=()

  # Global info array
  info=()

  # Use test suite if enabled
  if [ "${test}" == 1 ] ; then
    file=$(create_test "${cwd}/test/originals/$(basename ${file})")
    if [ $? != 0 ] ; then
      errors+=("ERROR: Error working with test env")
      echo "${errors[@]}" && return 1
    fi
  fi

  # Test for presence of file
  if [ ! -f ${file} ]; then
    errors+=("ERROR: File specified was not found,")
    echo "${errors[@]}" && return 1
  fi

  # Perform restoration if specified
  if [ "${restore}" == 1 ] ; then

    info+=("$(restore "${file}")")

    # Check results & return if an error occured
    if [ $? != 0 ]; then
      echo "${info[@]}" && return 1
    fi

    # Everything passed, return 0
    echo "${info[@]}" && return 0
  fi

  # Backup file if we are making changes
  if [[ "${check}" == 0 ]] && [[ "${restore}" == 0 ]] ; then

    info+=("$(backup "${file}" "${author}")")

    # Check results & return if an error occured
    if [ $? != 0 ]; then
      echo "${info[@]}" && return 1
    fi
  fi

  # For each account iterate the options specified in ${opts[@]} & apply/validate setting(s)
  for param in ${!opts[@]}; do

    # Build the ${value} from ${opts}/${param}
    if [ "${opts[${param}]}" == "" ]; then
      value="${param}"
      needle="${param}"
    else
      value="${param}=${opts[${param}]}"
      needle="${param}=[a-z|0-9]"
    fi

    # Make the change by creating ${haystack} for ${param}=${opts[${param}]}
    if [ "${check}" == 0 ]; then

      info+=("INFO: Setting ${param} to ${opts[${param}]},")

      # Get the kernel line from ${file}
      kernel=$(grep "kernel.*" ${file}|grep -v "^\#")

      # Create ${haystack} from ${kernel} using ${needle}
      haystack=$(grep "${param}" ${file}|grep -v "^\#"|sed -n -e "s/.*\(${needle}*\)\s.*/\1/p")

      # Replace ${haystack} from ${kernel} with ${value} if it's not empty
      if [ "${haystack}" != "" ]; then
        replacement=$(echo "${kernel}"|sed "s|${haystack}|${value}|g")
      else
        replacement="${kernel} ${value}"
      fi

      # Replace ${kernel} from ${file} with ${replacement}
      str_replace "${file}" "${kernel}" "${replacement}"
    fi

    # Ensure ${value} exists in ${file}
    info+=("INFO: Validating ${param} (${value}),")
    chk=$(grep "${value}" ${file}|grep -v "^\#")
    if [ "${chk}" == "" ]; then
      errors+=("ERROR: Incorrect value for ${param} (${value}),")
    fi
  done

  # Return errors
  if [ "${#errors[@]}" != 0 ] ; then
    errors+=("${info[@]}")
    echo "${errors[@]}" && return 1
  fi

  # Expose information array
  echo "${info[@]}"

  # Return code
  return 0
}

# Global options
verbose=0
check=0
restore=0
test=0
interactive=0
prog=$(basename $0)

# Ensure we have permissions
if [ $UID != 0 ] ; then
  echo "${prog}: Requires root privileges"
  exit 1
fi

# Set variables
while getopts "hvcrtia:f:" OPTION ; do
  case $OPTION in
    h) usage && exit 1 ;;
    a) author=$OPTARG ;;
    f) file=$OPTARG ;;
    v) verbose=1 ;;
    c) check=1 ;;
    r) restore=1 ;;
    t) test=1 ;;
    i) interactive=1 ;;
    ?) usage && exit 1 ;;
  esac
done

# Make sure we have an author if we are not restoring or validating
if [[ "${author}" == "" ]] && [[ "${restore}" == 0 ]] && [[ "${check}" == 0 ]]; then
  echo "${prog}: Must specify an author name (use -a <initials>)"
  usage
  exit 1
fi

# Robot, do work
main "config_grub_audit"
