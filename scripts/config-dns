#!/bin/bash

# Configuration file for DNS settings
file=/etc/resolv.conf

# DNS settings
declare -A dns
dns[domain]=""
dns[search]=""
dns[nameserver]=""

# Get our current working directory
cwd=$(dirname ${BASH_SOURCE[0]})

# Setup a path for binary tools (just in case)
PATH=$PATH:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin

# Make sure our common libraries are available
if [ ! -f "${cwd}/libs/common" ] ; then
  echo "${prog}: Could not load libraries"
  exit 1
fi

# Load our libs
source ${cwd}/libs/common

# Displays available arg list
usage()
{
  cat <<EOF
Usage $0 [options]

Configure DNS

  Help:
    -h  Show this message
    -v  Enable verbosity mode

  Required:
    -a  Author name (required)

  Options:
    -f  File to use

  Validation:
    -c  Perform validation of change

  Restoration options:
    -r  Perform rollback of changes
    -i  Interactive mode, to be used with -r

  Development mode:
    -t  Run in test mode (assumes test env)

EOF
}

# Perform configuration of DNS service
config_dns()
{
  # Error array
  errors=()

  # Global info array
  info=()

  # Use test suite if enabled
  if [ "${test}" == 1 ] ; then
    file=$(create_test "${cwd}/test/originals/$(basename ${file})")
    if [ $? != 0 ] ; then
      errors+=("ERROR: Error working with test env")
      echo "${errors[@]}" && return 1
    fi
  fi

  # Test for presence of file
  if [ ! -f ${file} ]; then
    errors+=("ERROR: File specified was not found,")
    echo "${errors[@]}" && return 1
  fi

  # Perform restoration if specified
  if [ "${restore}" == 1 ] ; then

    info+=("$(restore "${file}")")

    # Check results & return if an error occured
    if [ $? != 0 ]; then
      echo "${info[@]}" && return 1
    fi

    # Everything passed, return 0
    echo "${info[@]}" && return 0
  fi

  # Backup file if we are making changes
  if [[ "${check}" == 0 ]] && [[ "${restore}" == 0 ]] ; then

    info+=("$(backup "${file}" "${author}")")

    # Check results & return if an error occured
    if [ $? != 0 ]; then
      echo "${info[@]}" && return 1
    fi
  fi

  info+=("INFO: Setting domain to '${dns[domain]}',")

  # If we are not validating set domain value
  if [ "${check}" == 0 ] ; then
    str_replace "${file}" "^domain.*" "domain ${dns[domain]}"
  fi

  # Validate the dmain value
  chk=$(grep "^domain ${dns[domain]}" "${file}")
  if [ "${chk}" != "domain ${dns[domain]}" ] ; then
    errors+=("ERROR: Error setting domain (${dns[domain]}),")
  fi

  info+=("INFO: Setting search to '${dns[search]}'",)

  # If not validating set the search value
  if [ "${check}" == 0 ] ; then
    str_replace "${file}" "^search.*" "${dns[search]}"
  fi

  # Validate change occured
  chk=$(grep "^${str}" "${file}")
  if [ "${chk}" != "${dns[search]}" ] ; then
    errors+=("ERROR: Error setting search (${dns[search]}),")
  fi

  # If not validating clear nameserver field
  if [ "${check}" == 0 ] ; then
    sed --follow-symlinks -i 's/nameserver.*//g' ${file}
  fi

  # Loop for available nameservers
  IFS=' ' read -a nmsvr <<< "${ns[nameserver]}"
  for item in "${nmsvr[@]}"; do
    info+=("INFO: Setting nameserver to '${item}',")

    # If not validating set nameserver value
    if [ "${check}" == 0 ] ; then
      echo "nameserver ${item}" >> ${file}
    fi

    # Validate change occured
    chk=$(grep "^nameserver ${item}" "${file}")
    if [ "${chk}" != "nameserver ${item}" ] ; then
      errors+=("ERROR: Error setting nameserver (${item}),")
    fi
  done

  # If not validating wipe out empty lines
  if [ "${check}" == 0 ] ; then
    sed --follow-symlinks -i '/^$/d' ${file}
  fi

  # Return errors
  if [ "${#errors[@]}" != 0 ] ; then
    errors+=("${info[@]}")
    echo "${errors[@]}" && return 1
  fi

  # Expose information array
  echo "${info[@]}"

  # Return code
  return 0
}

# Global options
verbose=0
check=0
restore=0
test=0
interactive=0
prog=$(basename $0)

# Ensure we have permissions
if [ $UID != 0 ] ; then
  echo "${prog}: Requires root privileges"
  exit 1
fi

# Set variables
while getopts "ha:vcrtif:" OPTION ; do
  case $OPTION in
    h) usage && exit 1 ;;
    f) file=$OPTARG ;;
    a) author=$OPTARG ;;
    v) verbose=1 ;;
    c) check=1 ;;
    r) restore=1 ;;
    t) test=1 ;;
    i) interactive=1 ;;
    ?) usage && exit 1 ;;
  esac
done

# Make sure we have an author if we are not restoring or validating
if [[ "${author}" == "" ]] && [[ "${restore}" == 0 ]] && [[ "${check}" == 0 ]]; then
  echo "${prog}: Must specify an author name (use -a <initials>)"
  usage
  exit 1
fi

# Robot, do work
main "config_dns"
