#!/bin/bash

# Path to .kshrc
file=/root/.kshrc

# .kshrc profile settings
# See https://www-01.ibm.com/support/knowledgecenter/ssw_aix_61/com.ibm.aix.files/kshrc.htm
declare -A kshrc
kshrc[EDITOR]="set -o vi"
kshrc[PS1]='$(echo -e "\033[31mroot@`hostname`# \033[00m")'

# Get our current working directory
cwd=$(dirname ${BASH_SOURCE[0]})

# Setup a path for binary tools (just in case)
PATH=$PATH:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin

# Make sure our common libraries are available
if [ ! -f "${cwd}/libs/common" ] ; then
  echo "${prog}: Could not load libraries"
  exit 1
fi

# Load our libs
source ${cwd}/libs/common

# Displays available arg list
usage()
{
  cat <<EOF
Usage $0 [options]

Manage ksh shell options

  Help:
    -h  Show this message
    -v  Enable verbosity mode

  Required:
    -a  Author name (required)

  Options:
    -f  File to use

  Validation:
    -c  Perform validation of change

  Restoration options:
    -r  Perform rollback of changes
    -i  Interactive mode, to be used with -r

  Development mode:
    -t  Run in test mode (assumes test env)

EOF
}

# Configure the .kshrc profile
config_kshrc()
{
  # Error array
  errors=()

  # Global info array
  info=()

  # Use test suite if enabled
  if [ "${test}" == 1 ] ; then
    file=$(create_test "${cwd}/test/originals/$(basename ${file})")
    if [ $? != 0 ] ; then
      errors+=("ERROR: Error working with test env")
      echo "${errors[@]}" && return 1
    fi
  fi

  # Make ${file} if it doesn't exist
  if [ ! -f ${file} ]; then
    touch ${file}
    chmod 0644 ${file}
  fi

  # Test for presence of file
  if [ ! -f ${file} ]; then
    errors+=("ERROR: File specified was not found,")
    echo "${errors[@]}" && return 1
  fi

  # Perform restoration if specified
  if [ "${restore}" == 1 ] ; then

    info+=("$(restore "${file}")")

    # Check results & return if an error occured
    if [ $? != 0 ]; then
      echo "${info[@]}" && return 1
    fi

    # Everything passed, return 0
    echo "${info[@]}" && return 0
  fi

  # Backup file if we are making changes
  if [[ "${check}" == 0 ]] && [[ "${restore}" == 0 ]] ; then

    info+=("$(backup "${file}" "${author}")")

    # Check results & return if an error occured
    if [ $? != 0 ]; then
      echo "${info[@]}" && return 1
    fi
  fi

  # Logic for various options available for .kshrc
  # See https://www-01.ibm.com/support/knowledgecenter/ssw_aix_61/com.ibm.aix.files/kshrc.htm
  for item in "${!kshrc[@]}"; do

    # Handle the PS1 configuration options
    if [ "${item}" == "PS1" ]; then
      pattern="^export PS1="

      if [ "${check}" == 0 ] ; then
        info+=("INFO: Setting PS1,")
        str_replace "${file}" "${pattern}" "export PS1='${kshrc[${item}]}'"
      fi

      info+=("INFO: Validating PS1 (${pattern}),")
      
      # Apply some escaping for the PS1 pattern & grep
      if [ "$(grep "${pattern}" ${file})" == "" ]; then
        errors+=("ERROR: Could not validate configuration for PS1 (${pattern}),")
      fi

    # Handle any 'set' options
    elif [[ "${kshrc[${item}]}" =~ ^set ]]; then
      pattern=$(echo ${kshrc[${item}]}|awk '{print $1 " " $2}')
      [ "${pattern}" == "" ] && pattern="^${kshrc[${item}]}"

      if [ "${check}" == 0 ] ; then
        info+=("INFO: Setting default option (${kshrc[${item}]}),")
        str_replace "${file}" "${pattern}.*" "${kshrc[${item}]}"
      fi

      if [ "${pattern}" != "" ]; then
        info+=("INFO: Validating any 'set' options,")
        if [ "$(grep ${pattern} ${file})" == "" ]; then
          errors+=("ERROR: Could not validate configuration for ${kshrc[${item}]},")
        fi
      fi

    # Handle any 'alias' options
    elif [[ "${kshrc[${item}]}" =~ ^alias ]]; then
      pattern=$(echo ${kshrc[${item}]}|awk '{split($2, obj, "=");print $1 " " obj[1]}')
      [ "${pattern}" == "" ] && pattern="^${kshrc[${item}]}"

      if [ "${check}" == 0 ] ; then
        info+=("INFO: Setting alias (${kshrc[${item}]}),")
        str_replace "${file}" "^${pattern}.*" "${kshrc[${item}]}"
      fi

      if [ "${pattern}" != "" ]; then
        info+=("INFO: Validating any 'alias' definitions,")
        if [ "$(grep ${pattern} ${file})" == "" ]; then
          errors+=("ERROR: Could not validate configuration for ${kshrc[${item}]},")
        fi
      fi

    # Handle any 'function' options (must be on one line, multi line not supported)
    elif [[ "${kshrc[${item}]}" =~ ^function ]]; then
      pattern=$(echo ${item}|awk '{print $1 " " $2}')
      [ "${pattern}" == "" ] && pattern="^${kshrc[${item}]}"

      if [ "${check}" == 0 ] ; then
        info+=("INFO: Adding function (${kshrc[${item}]}),")
        str_replace "${file}" "^${pattern}.*" "${kshrc[${item}]}"
      fi

      if [ "${pattern}" != "" ]; then
        info+=("INFO: Validating any 'function' definitions,")
        if [ "$(grep ${pattern} ${file})" == "" ]; then
          errors+=("ERROR: Could not validate configuration for ${kshrc[${item}]},")
        fi
      fi

    # Set key = value for the reset
    else
      if [ "${item}" != "" ]; then
        if [ "${check}" == 0 ] ; then
          info+=("INFO: Setting option (${item}=${kshrc[${item}]}),")
          str_replace "${file}" "^${item}=.*" "${item}=${kshrc[${item}]}"
        fi

        if [ "${pattern}" != "" ]; then
          info+=("INFO: Validating specified option,")
          if [ "$(grep "^${item}=.*" ${file})" == "" ]; then
            errors+=("ERROR: Could not validate option ${item}=${kshrc[${item}]},")
          fi
        fi
      fi
    fi
  done

  # Return errors
  if [ "${#errors[@]}" != 0 ] ; then
    errors+=("${info[@]}")
    echo "${errors[@]}" && return 1
  fi

  # Expose information array
  echo "${info[@]}"

  # Return code
  return 0
}

# Global options
verbose=0
check=0
restore=0
test=0
interactive=0
prog=$(basename $0)

# Ensure we have permissions
if [ $UID != 0 ] ; then
  echo "${prog}: Requires root privileges"
  exit 1
fi

# Set variables
while getopts "ha:vcrtif:" OPTION ; do
  case $OPTION in
    h) usage && exit 1 ;;
    a) author=$OPTARG ;;
    f) file=$OPTARG ;;
    v) verbose=1 ;;
    c) check=1 ;;
    r) restore=1 ;;
    t) test=1 ;;
    i) interactive=1 ;;
    ?) usage && exit 1 ;;
  esac
done

# Make sure we have an author if we are not restoring or validating
if [[ "${author}" == "" ]] && [[ "${restore}" == 0 ]] && [[ "${check}" == 0 ]]; then
  echo "${prog}: Must specify an author name (use -a <initials>)"
  usage
  exit 1
fi

# Robot, do work
main "config_kshrc"
