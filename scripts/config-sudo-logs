#!/bin/bash

# File to use
file=/var/log/sudo.log

# Owner/Group attributes
owner='root'
group='root'

# Permissions (octets)
octet=600

# Get our current working directory
cwd=$(dirname ${BASH_SOURCE[0]})

# Setup a path for binary tools (just in case)
PATH=$PATH:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin

# Make sure our common libraries are available
if [ ! -f "${cwd}/libs/common" ] ; then
  echo "${prog}: Could not load libraries"
  exit 1
fi

# Load our libs
source ${cwd}/libs/common

# Displays available arg list
usage()
{
  cat <<EOF
Usage $0 [options]

Handle sudoer authentication log handling

  Help:
    -h  Show this message
    -v  Enable verbosity mode

  Required:
    -a  Author name (required)

  Options:
    -f  File to use

  Validation:
    -c  Perform validation of change

  Restoration options:
    -r  Perform rollback of changes
    -i  Interactive mode, to be used with -r

  Development mode:
    -t  Run in test mode (assumes test env)

EOF
}

config_sudo_logs()
{
  # Error array
  errors=()

  # Global info array
  info=()

  # Use test suite if enabled
  if [ "${test}" == 1 ] ; then
    file=$(create_test "${cwd}/test/originals/$(basename ${file})")
    if [ $? != 0 ] ; then
      errors+=("ERROR: Error working with test env")
      echo "${errors[@]}" && return 1
    fi
  fi

  # Make ${file} if it doesn't exist
  if [ ! -f ${file} ]; then
    touch ${file}
    chmod 0644 ${file}
  fi

  # Test for presence of file
  if [ ! -f ${file} ]; then
    errors+=("ERROR: File specified was not found,")
    echo "${errors[@]}" && return 1
  fi

  # Perform restoration if specified
  if [ "${restore}" == 1 ] ; then

    info+=("$(restore "${file}")")

    # Check results & return if an error occured
    if [ $? != 0 ]; then
      echo "${info[@]}" && return 1
    fi

    # Everything passed, return 0
    echo "${info[@]}" && return 0
  fi

  # Backup file if we are making changes
  if [[ "${check}" == 0 ]] && [[ "${restore}" == 0 ]] ; then

    info+=("$(backup "${file}" "${author}")")

    # Check results & return if an error occured
    if [ $? != 0 ]; then
      echo "${info[@]}" && return 1
    fi
  fi

  # Make the change(s)
  if [ "${check}" != 1 ]; then

    # Create the file if it doesn't already exist
    if [ ! -f ${file} ]; then
      info+=("INFO: Creating ${file},")
      touch ${file}
    fi

    # Set ownership regardless of current values
    info+=("INFO: Setting ownership on ${file} (${owner}|${group}),")
    chown "${owner}:${group}" ${file}

    # Set permissions regardless of current values
    info+=("INFO: Setting permissions on ${file} (${octet}),")
    chmod ${octet} ${file}
  fi

  # Verify it
  info+=("INFO: Verifying ${file},")
  if [ ! -f ${file} ]; then
    errors+=("ERROR: ${file} is missing,")
  else

    # Get permissions
    info+=("INFO: Verifying permissions on ${file} (${octet}),")
    perm=$(stat -c %a ${file})
    if [ "${perm}" != "${octet}" ]; then
      errors+=("ERROR: Incorrect permissions for ${file} (${perm}),")
    fi

    # Get permissions
    info+=("INFO: Verifying user/owner on ${file} (${owner}:${group}),")
    perm=$(stat -c %U:%G ${file})
    if [ "${perm}" != "${owner}:${group}" ]; then
      errors+=("ERROR: Incorrect permissions for ${file} (${perm}),")
    fi
  fi

  # Return errors
  if [ "${#errors[@]}" != 0 ] ; then
    errors+=("${info[@]}")
    echo "${errors[@]}" && return 1
  fi

  # Expose information array
  echo "${info[@]}"

  # Return code
  return 0
}

# Global options
verbose=0
check=0
restore=0
test=0
interactive=0
prog=$(basename $0)

# Ensure we have permissions
if [ $UID != 0 ] ; then
  echo "${prog}: Requires root privileges"
  exit 1
fi

# Set variables
while getopts "ha:vcrtif:" OPTION ; do
  case $OPTION in
    h) usage && exit 1 ;;
    a) author=$OPTARG ;;
    f) file=$OPTARG ;;
    v) verbose=1 ;;
    c) check=1 ;;
    r) restore=1 ;;
    t) test=1 ;;
    i) interactive=1 ;;
    ?) usage && exit 1 ;;
  esac
done

# Make sure we have an author if we are not restoring or validating
if [[ "${author}" == "" ]] && [[ "${restore}" == 0 ]] && [[ "${check}" == 0 ]]; then
  echo "${prog}: Must specify an author name (use -a <initials>)"
  usage
  exit 1
fi

# Robot, do work
main "config_sudo_logs"
