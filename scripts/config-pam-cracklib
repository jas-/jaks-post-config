#!/bin/bash

# Configuration file for pam_cracklib in the stack
file=/etc/pam.d/system-auth

# Specify stack to create haystack from (account|auth|password|session)
type="password"

# Specify a mode (control) for the module [requisite|required|sufficient|optional]
mode="requisite"

# Configurable flags for pam_cracklib
declare -A flags
flags[try_first_pass]=
flags[retry]=10
flags[difok]=1
flags[dcredit]=-1
flags[ucredit]=-1
flags[ocredit]=-1
flags[lcredit]=-1
flags[minlen]=8

# Get our current working directory
cwd=$(dirname ${BASH_SOURCE[0]})

# Setup a path for binary tools (just in case)
PATH=$PATH:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin

# Make sure our common libraries are available
if [ ! -f "${cwd}/libs/common" ] ; then
  echo "${prog}: Could not load libraries"
  exit 1
fi

# Load our libs
source ${cwd}/libs/common

# Displays available arg list
usage()
{
  cat <<EOF
Usage $0 [options]

Manage the pam_cracklib configuration

  Help:
    -h  Show this message
    -v  Enable verbosity mode

  Required:
    -a  Author name (required)

  Options:
    -f  Array of files to use
    -o  Specify type [account|auth|password|session]
    -m  Specify mode [required|requisite|sufficient|optional]

  Validation:
    -c  Perform validation of change

  Restoration options:
    -r  Perform rollback of changes
    -i  Interactive mode, to be used with -r

  Development mode:
    -t  Run in test mode (assumes test env)

EOF
}

# Enables pam_cracklist to enforce password complexity requirements
config_pam_cracklib()
{
  # Error array
  errors=()

  # Global info array
  info=()

  # Use test suite if enabled
  if [ "${test}" == 1 ] ; then
    local file=$(create_test "${cwd}/test/originals/$(basename ${file})")
    if [ $? != 0 ] ; then
      errors+=("ERROR: Error working with test env")
      echo "${errors[@]}" && return 1
    fi
  fi

  # Test for presence of file
  if [ ! -f ${file} ]; then
    errors+=("ERROR: File specified was not found,")
    echo "${errors[@]}" && return 1
  fi

  # Perform restoration if specified
  if [ "${restore}" == 1 ] ; then

    info+=("$(restore "${file}")")

    # Check results & return if an error occured
    if [ $? != 0 ]; then
      echo "${info[@]}" && return 1
    fi

    # Everything passed, return 0
    echo "${info[@]}" && return 0
  fi

  # Backup file if we are making changes
  if [[ "${check}" == 0 ]] && [[ "${restore}" == 0 ]] ; then

    info+=("$(backup "${file}" "${author}")")

    # Check results & return if an error occured
    if [ $? != 0 ]; then
      echo "${info[@]}" && return 1
    fi
  fi

  # Build a pattern based on ${flags[@]} for searching, validation and creation
  for flag in "${!flags[@]}"; do
    if [ "${flags[${flag}]}" == "" ]; then
      pattern="${pattern}${flag} "
    else
      pattern="${pattern}${flag}=${flags[${flag}]} "
    fi
  done

  # If we are not validating enable pam_cracklib changes
  if [ "${check}" == 0 ] ; then
    info+=("INFO: Applying parameters for pam_cracklib,")

    haystack=$(grep "^${type}" ${file} |  grep "pam_cracklib.so" | grep -v "^\#")

    if [[ "${haystack}" =~ pam_cracklib ]] ; then
      sed --follow-symlinks -i "s|${haystack}|${type} ${mode} pam_cracklib.so ${pattern}|" ${file}
    else
      flatten_to_replace "${file}" "^${type}.*$" "${type} ${mode} pam_cracklib.so ${pattern}"
    fi
  fi

  info+=("INFO: Validating parameters for pam_cracklib,")

  # Create a ${haystack}
  haystack=$(grep "^${type}.*${mode}" ${file} | grep "pam_cracklib.so" | grep -v "^\#")

  # Loop over ${flags[@]} and compare to ${haystack}, provide errors or verbose
  for flag in "${!flags[@]}"; do

    # Accomodate for empty values per key (i.e. use_authtok vs. key=value)
    [ "${flags[${flag}]}" == "" ] && chk="${flag}" || chk="${flag}=${flags[${flag}]}"

    if [ "$(echo "${haystack}"|grep "${chk}")" == "" ]; then
      errors+=("ERROR: Missing option ${chk},")
    else
      info+=("INFO: Found ${chk} option specified,")
    fi
  done

  # Return errors
  if [ "${#errors[@]}" != 0 ] ; then
    errors+=("${info[@]}")
    echo "${errors[@]}" && return 1
  fi

  # Expose information array
  echo "${info[@]}"

  # Return code
  return 0
}

# Global options
verbose=0
check=0
restore=0
test=0
interactive=0
prog=$(basename $0)

# Ensure we have permissions
if [ $UID != 0 ] ; then
  echo "${prog}: Requires root privileges"
  exit 1
fi

# Set variables
while getopts "ha:vcrtif:o:m:" OPTION ; do
  case $OPTION in
    h) usage && exit 1 ;;
    a) author=$OPTARG ;;
    f) file=$OPTARG ;;
    o) type=$OPTARG ;;
    m) mode=$OPTARG ;;
    v) verbose=1 ;;
    c) check=1 ;;
    r) restore=1 ;;
    t) test=1 ;;
    i) interactive=1 ;;
    ?) usage && exit 1 ;;
  esac
done

# Make sure we have an author if we are not restoring or validating
if [[ "${author}" == "" ]] && [[ "${restore}" == 0 ]] && [[ "${check}" == 0 ]]; then
  echo "${prog}: Must specify an author name (use -a <initials>)"
  usage
  exit 1
fi

# Robot, do work
main "config_pam_cracklib"
