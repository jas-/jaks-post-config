#!/bin/bash

# Associative array of files
declare -A files
files[auditd]=/etc/audit/auditd.conf
files[rules]=/etc/audit/audit.rules

# Array of key / value options for auditd
# Ref: https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Security_Guide/sec-configuring_the_audit_service.html
declare -A auditd
auditd[num_logs]=16
auditd[max_log_file]=250
auditd[flush]="sync"

# Array of rules for auditd
# Ref: https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Security_Guide/sec-Defining_Audit_Rules_and_Controls.html
rules=(
"-a always,exit -F arch=b32 -S execve"
"-a always,exit -F arch=b64 -S execve"
"-w /etc/login.defs -p wa -k CFG_login.defs"
"-w /etc/securetty -p wa -k CFG_securetty"
"-w /var/log/faillog -p wa -k LOG_faillog"
"-w /var/log/lastlog -p wa -k LOG_lastlog"
"-w /var/log/tallylog -p wa -k LOG_tallylog"
"-e 1"
)

# Get our current working directory
cwd=$(dirname ${BASH_SOURCE[0]})

# Setup a path for binary tools (just in case)
PATH=$PATH:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin

# Make sure our common libraries are available
if [ ! -f "${cwd}/libs/common" ] ; then
  echo "${prog}: Could not load libraries"
  exit 1
fi

# Load our libs
source ${cwd}/libs/common

# Displays available arg list
usage()
{
  cat <<EOF
Usage $0 [options]

Configure defaults & rules for the auditd service

  Help:
    -h  Show this message
    -v  Enable verbosity mode

  Required:
    -a  Author name (required)

  Options:
    -u  Auditd configuration file
    -p  Auditd rules file

  Validation:
    -c  Perform validation of change

  Restoration options:
    -r  Perform rollback of changes
    -i  Interactive mode, to be used with -r

  Development mode:
    -t  Run in test mode (assumes test env)

EOF
}

config_audit_rules()
{
  # Error array
  errors=()

  # Global info array
  info=()

  # Iterate our array of files
  for file in ${!files[@]}; do

    # Start counting so we have an index
    i=$((i+1))

    # Use test suite if enabled
    if [ "${test}" == 1 ] ; then
      files[${file}]=$(create_test "${cwd}/test/originals/$(basename ${files[${file}]})")
      if [ $? != 0 ] ; then
        errors+=("ERROR: Error working with test env for ${file} (${files[${file}]}")
        echo "${errors[@]}" && return 1
      fi
    fi

    # Ensure the file/path is a valid file
    if [ ! -f ${files[${file}]} ]; then
      errors+=("ERROR: File ${file} not found (${files[${file}]}),")
      echo "${errors[@]}" && return 1
    fi

    # Perform restoration if specified
    if [ "${restore}" == 1 ] ; then

      info+=("$(restore "${files[${file}]}")")

      # Check results & return if an error occured
      if [ $? != 0 ]; then
        echo "${info[@]}" && return 1
      fi

      # If its the last file in the ${files[@]} array exit success
      if [ ${i} -eq ${#files[@]} ]; then
        echo "${info[@]}" && return 0
      fi
    fi

    # Backup file if we are making changes
    if [[ "${check}" == 0 ]] && [[ "${restore}" == 0 ]] ; then

      info+=("$(backup "${files[${file}]}" "${author}")")

      # Check results & return if an error occured
      if [ $? != 0 ]; then
        echo "${info[@]}" && return 1
      fi
    fi
  done

  # Iterate ${auditd[@]} and apply defaults for auditd service
  for audit in ${!auditd[@]}; do

    # Make the change
    if [ "${check}" == 1 ]; then
      info+=("INFO: Applying ${audit} (${auditd[${audit}]}) option,")
      str_replace "${files[auditd]}" "^${audit}.*" "${audit} = ${auditd[${audit}]}"
    fi

    # Validate ${audit}=${auditd[${audit}]}
    info+=("INFO: Validating ${audit} (${auditd[${audit}]}),")
    chk=$(grep "^${audit}.*${auditd[${audit}]}" ${files[auditd]})
    if [ "${chk}" == "" ]; then
      errors+=("ERROR: Could not validate ${audit} (${auditd[${audit}]}),")
    fi
  done

  # Iterate ${rules[@]} and apply defaults for auditd service
  for rule in "${rules[@]}"; do

    # Create a ${needle}
    needle="$(echo "${rule}"|tr ' ' '*'|sed -e 's|-|\-|g' -e 's|\*|.*|g')"

    # Create print friendly rule
    val="$(echo "${rule}"|tr ',' ' ')"

    # Make the change
    if [ "${check}" == 0 ]; then
      info+=("INFO: Applying ${val},")
      str_replace "${files[rules]}" "^${needle}" "${rule}"
    fi

    # Validate ${rules[${rule}]}
    info+=("INFO: Validating ${val},")
    chk=$(grep "^${needle}" ${files[rules]})
    if [ "${chk}" == "" ]; then
      errors+=("ERROR: Could not validate ${val},")
    fi
  done

  # Return errors
  if [ "${#errors[@]}" != 0 ] ; then
    errors+=("${info[@]}")
    echo "${errors[@]}" && return 1
  fi

  # Expose information array
  echo "${info[@]}"

  # Return code
  return 0
}

# Global options
verbose=0
check=0
restore=0
test=0
interactive=0
prog=$(basename $0)

# Ensure we have permissions
if [ $UID != 0 ] ; then
  echo "${prog}: Requires root privileges"
  exit 1
fi

while getopts "ha:vcrtiu:p:" OPTION ; do
  case $OPTION in
    h) usage && exit 1 ;;
    a) author=$OPTARG ;;
    u) files[auditd]=$OPTARG ;;
    p) files[rules]=$OPTARG ;;
    v) verbose=1 ;;
    c) check=1 ;;
    r) restore=1 ;;
    t) test=1 ;;
    i) interactive=1 ;;
    ?) usage && exit 1 ;;
  esac
done

# Make sure we have an author if we are not restoring or validating
if [[ "${author}" == "" ]] && [[ "${restore}" == 0 ]] && [[ "${check}" == 0 ]]; then
  echo "${prog}: Must specify an author name (use -a <initials>)"
  usage
  exit 1
fi

# Robot, do work
main "config_audit_rules"
