#!/bin/bash

# Associative array of files handling any libuser default configurations
declare -A files
files[defaults]=/etc/libuser.conf

# Array of key / value options for libuser.conf
# For a complete list please consult man(5) libuser.conf
# To disable a feature omit the value
declare -A opts
opts[login_defs]=/etc/login.defs
opts[LU_SHADOWMAX]=
opts[LU_SHADOWMIN]=
opts[LU_SHADOWWARNING]=

# Get our current working directory
cwd=$(dirname ${BASH_SOURCE[0]})

# Setup a path for binary tools (just in case)
PATH=$PATH:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin

# Make sure our common libraries are available
if [ ! -f "${cwd}/libs/common" ] ; then
  echo "${prog}: Could not load libraries"
  exit 1
fi

# Load our libs
source ${cwd}/libs/common

# Displays available arg list
usage()
{
  cat <<EOF
Usage $0 [options]

Configure user account default parameters

  Help:
    -h  Show this message
    -v  Enable verbosity mode

  Required:
    -a  Author name (required)

  Options:
    -f  Array of files to use

  Validation:
    -c  Perform validation of change

  Restoration options:
    -r  Perform rollback of changes
    -i  Interactive mode, to be used with -r

  Development mode:
    -t  Run in test mode (assumes test env)

EOF
}

config_acct_libuser()
{
  # Error array
  errors=()

  # Global info array
  info=()

  # Iterate our array of files
  for file in ${!files[@]}; do

    # Start counting so we have an index
    i=$((i+1))

    # Use test suite if enabled
    if [ "${test}" == 1 ] ; then
      files[${file}]=$(create_test "${cwd}/test/originals/$(basename ${files[${file}]})")
      if [ $? != 0 ] ; then
        errors+=("ERROR: Error working with test env for ${file} (${files[${file}]}")
        echo "${errors[@]}" && return 1
      fi
    fi

    # Ensure the file/path is a valid file
    if [ ! -f ${files[${file}]} ]; then
      errors+=("ERROR: File ${file} not found (${files[${file}]}),")
      echo "${errors[@]}" && return 1
    fi

    # Perform restoration if specified
    if [ "${restore}" == 1 ] ; then

      info+=("$(restore "${files[${file}]}")")

      # Check results & return if an error occured
      if [ $? != 0 ]; then
        echo "${info[@]}" && return 1
      fi

      # If its the last file in the ${files[@]} array exit success
      if [ ${i} -eq ${#files[@]} ]; then
        echo "${info[@]}" && return 0
      fi
    fi

    # Backup file if we are making changes
    if [[ "${check}" == 0 ]] && [[ "${restore}" == 0 ]] ; then

      info+=("$(backup "${files[${file}]}" "${author}")")

      # Check results & return if an error occured
      if [ $? != 0 ]; then
        echo "${info[@]}" && return 1
      fi
    fi

    # Iterate ${opts[@]} array and ensure modify/validate ${files[${file}]}
    for item in "${!opts[@]}"; do

      # Set a default value
      value="${item} = ${opts[${item}]}"

      # Disable option if ${opts[${item}]} value is empty
      if [ "${opts[${item}]}" == "" ]; then
        value="#${item}"
      fi

      # Do the work
      if [ "${check}" == 0 ] ; then
        info+=("INFO: Modifying ${item},")

        # Make the change if ${chk} exists
        chk=$(grep "^${item}.*" ${files[${file}]})
        if [ "${chk}" != "" ]; then
          str_replace "${files[${file}]}" "^${item}.*" "${value}"
        fi
      fi

      # Validate ${value} exists in the specified ${files[${file}]}
      info+=("INFO: Validating ${item} (${value}),")
      chk=$(grep "^$(echo "${value}"|sed -e 's/\#/\\#.*/g')" ${files[${file}]})
      if [ "${chk}" == "" ] ; then
        errors+=("ERROR: Unable to validate ${item} (${value}),")
      fi
    done
  done

  # Return errors
  if [ "${#errors[@]}" != 0 ] ; then
    errors+=("${info[@]}")
    echo "${errors[@]}" && return 1
  fi

  # Expose information array
  echo "${info[@]}"

  # Return code
  return 0
}

# Global options
verbose=0
check=0
restore=0
test=0
interactive=0
prog=$(basename $0)

# Ensure we have permissions
if [ $UID != 0 ] ; then
  echo "${prog}: Requires root privileges"
  exit 1
fi

# Set variables
while getopts "ha:vcrtif:" OPTION ; do
  case $OPTION in
    h) usage && exit 1 ;;
    a) author=$OPTARG ;;
    f) files+=("$OPTARG") ;;
    v) verbose=1 ;;
    c) check=1 ;;
    r) restore=1 ;;
    t) test=1 ;;
    i) interactive=1 ;;
    ?) usage && exit 1 ;;
  esac
done

# Make sure we have an author if we are not restoring or validating
if [[ "${author}" == "" ]] && [[ "${restore}" == 0 ]] && [[ "${check}" == 0 ]]; then
  echo "${prog}: Must specify an author name (use -a <initials>)"
  usage
  exit 1
fi

# Robot, do work
main "config_acct_libuser"
