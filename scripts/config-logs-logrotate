#!/bin/bash

# File to use
file=/etc/logrotate.d/syslog

# Array of files that should be rotated by logrotate
files=(
/var/log/messages
/var/log/secure
/var/log/maillog
/var/log/spooler
/var/log/cron
/var/log/kern.log
/var/log/daemon.log
/var/log/syslog
/var/log/sudo.log
)

# Get our current working directory
cwd=$(dirname ${BASH_SOURCE[0]})

# Setup a path for binary tools (just in case)
PATH=$PATH:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin

# Make sure our common libraries are available
if [ ! -f "${cwd}/libs/common" ] ; then
  echo "${prog}: Could not load libraries"
  exit 1
fi

# Load our libs
source ${cwd}/libs/common

# Displays available arg list
usage()
{
  cat <<EOF
Usage $0 [options]

Manage the syslog files for logrotate

  Help:
    -h  Show this message
    -v  Enable verbosity mode

  Required:
    -a  Author name (required)

  Options:
    -f  File to use

  Validation:
    -c  Perform validation of change

  Restoration options:
    -r  Perform rollback of changes
    -i  Interactive mode, to be used with -r

  Development mode:
    -t  Run in test mode (assumes test env)

EOF
}

config_logs_rotate()
{
  # Error array
  errors=()

  # Global info array
  info=()

  # Use test suite if enabled
  if [ "${test}" == 1 ] ; then
    file=$(create_test "${cwd}/test/originals/$(basename ${file})")
    if [ $? != 0 ] ; then
      errors+=("ERROR: Error working with test env")
      echo "${errors[@]}" && return 1
    fi
  fi

  # Test for presence of file
  if [ ! -f ${file} ]; then
    errors+=("ERROR: File specified was not found,")
    echo "${errors[@]}" && return 1
  fi

  # Perform restoration if specified
  if [ "${restore}" == 1 ] ; then

    info+=("$(restore "${file}")")

    # Check results & return if an error occured
    if [ $? != 0 ]; then
      echo "${info[@]}" && return 1
    fi

    # Everything passed, return 0
    echo "${info[@]}" && return 0
  fi

  # Backup file if we are making changes
  if [[ "${check}" == 0 ]] && [[ "${restore}" == 0 ]] ; then

    info+=("$(backup "${file}" "${author}")")

    # Check results & return if an error occured
    if [ $? != 0 ]; then
      echo "${info[@]}" && return 1
    fi
  fi

  # Create a ${start} & ${stop} pattern to capture between lines of ${file}
  start="$(sed q ${file})"
  stop="{"

  # Create ${haystack} array from the list of files already being rotated
  IFS=' ' read -a haystack <<< $(awk -v start="${start}" -v stop="${stop}" '$0 ~ start{print;flag=1;next}$0 ~ stop{flag=0}flag' ${file}|tr '\n' ' ')

  # Make sure comm has two valid objects to work with
  if [[ ${#haystack[@]} -gt 0 ]] && [[ ${#files[@]} -gt 0 ]]; then

    # Get everything that doesn't exist in ${haystack[@]} from ${files[@]}
    res=($(comm -13 <(printf '%s\n' "${haystack[@]}"|sort -u) <(printf '%s\n' "${files[@]}"|sort -u)))

  else

    # If ${#haystack[@]} > 0 but ${#files[@]} <= 0 do this...
    if [[ ${#haystack[@]} -gt 0 ]] && [[ ${#files[@]} -le 0 ]]; then
      res="$(echo "${haystack[@]}"|sort -u)"
    fi

    # If ${#haystack[@]} <= 0 but ${#files[@]} > 0 do this...
    if [[ ${#haystack[@]} -le 0 ]] && [[ ${#files[@]} -gt 0 ]]; then
      res="$(echo "${files[@]}"|sort -u)"
    fi
  fi

  # Iterate ${res[@]} array if greater than 0
  if [ ${#res[@]} -gt 0 ]; then

    # Make the change
    if [ "${check}" == 0 ]; then

      # Add ${res[@]} to ${haystack[@]}
      for item in ${res[@]}; do
        haystack+=("${item}")
      done

      info+=("INFO: Adding missing files to logrotate,")

      # Use ${needle} as pattern to replace with ${haystack[@]}
      str_multiline_array_replace "${file}" "${start}" "${stop}" "${haystack[@]}"
    fi

    # Iterate ${res[@]} for validation
    for item in ${res[@]}; do

      info+=("INFO: Validating ${item},")

      # Look for ${item} in ${file}
      chk=$(grep "${item}" ${file})
      if [ "${chk}" == "" ]; then
        errors+=("ERROR: ${item} is missing,")
      fi
    done
  else
    # No differences found so all logs are currently being rotated
    info+=("INFO: All specified logs already present for logrotated,")
  fi

  # Return errors & set error code
  if [ "${#errors[@]}" -gt 0 ] ; then
    errors+=("${info[@]}")
    echo "${errors[@]}" && return 1
  fi

  # Expose information array
  echo "${info[@]}"

  # Return code
  return 0
}

# Global options
verbose=0
check=0
restore=0
test=0
interactive=0
prog=$(basename $0)

# Ensure we have permissions
if [ $UID != 0 ] ; then
  echo "${prog}: Requires root privileges"
  exit 1
fi

# Set variables
while getopts "ha:vcrtif:" OPTION ; do
  case $OPTION in
    h) usage && exit 1 ;;
    a) author=$OPTARG ;;
    f) file=$OPTARG ;;
    v) verbose=1 ;;
    c) check=1 ;;
    r) restore=1 ;;
    t) test=1 ;;
    i) interactive=1 ;;
    ?) usage && exit 1 ;;
  esac
done

# Make sure we have an author if we are not restoring or validating
if [[ "${author}" == "" ]] && [[ "${restore}" == 0 ]] && [[ "${check}" == 0 ]]; then
  echo "${prog}: Must specify an author name (use -a <initials>)"
  usage
  exit 1
fi

# Robot, do work
main "config_logs_rotate"
